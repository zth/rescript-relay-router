// @generated
// This file is autogenerated from `routes.json`, do not edit manually.
module Internal = {
  @live
  type params = {
  }

  @live
  type prepareProps = RelayRouter__Internal__DeclarationsSupport.prepareProps<params>

  @live
  let makePrepareProps = (. 
    ~environment: RescriptRelay.Environment.t,
    ~pathParams: Js.Dict.t<string>,
    ~queryParams: RelayRouter.Bindings.QueryParams.t,
    ~location: RelayRouter.History.location,
  ): prepareProps  => {
    ignore(pathParams)
    ignore(queryParams)
    {
      environment: environment,
  
      location: location,
  
      params: {
    }
  }
  }

}



@inline
let routePattern = "/"

@live
let makeLink = () => {
  RelayRouter.Bindings.generatePath(routePattern, Js.Dict.fromArray([]))
}

@live
let isRouteActive = (~exact: bool=false, {pathname}: RelayRouter.History.location): bool => {
  RelayRouter.Internal.matchPathWithOptions({"path": routePattern, "end": exact}, pathname)->Belt.Option.isSome
}

@live
let useIsRouteActive = (~exact=false) => {
  let location = RelayRouter.Utils.useLocation()
  React.useMemo2(() => location->isRouteActive(~exact), (location, exact))
}
@live
type subRoute = [#Todos]

@live
let getActiveSubRoute = (location: RelayRouter.History.location): option<[#Todos]> => {
  let {pathname} = location
  if RelayRouter.Internal.matchPath("/todos", pathname)->Belt.Option.isSome {
      Some(#Todos)
    } else {
    None
  }
}

@live
let useActiveSubRoute = (): option<[#Todos]> => {
  let location = RelayRouter.Utils.useLocation()
  React.useMemo1(() => {
    getActiveSubRoute(location)
  }, [location])
}

  type routeRenderer<'prepared> = RelayRouter__Internal__DeclarationsSupport.RouteRenderer.t<Internal.params, 'prepared>
